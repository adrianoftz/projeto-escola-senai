<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Auto-generating news and publishing it to WordPress with Apache Camel</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/83OBURWkISo/" /><category term="Integration" /><category term="Java" /><category term="JBoss Fuse" /><category term="Agile Integration" /><category term="apache camel" /><category term="Camel WordPress" /><category term="Red Hat OpenShift" /><category term="WordPress" /><author><name>Ricardo Zanini</name></author><id>https://developers.redhat.com/blog/?p=515527</id><updated>2018-08-27T11:00:58Z</updated><published>2018-08-27T11:00:58Z</published><content type="html">&lt;p&gt;With the release of &lt;a href="http://camel.apache.org/camel-2210-release.html"&gt;Apache Camel 2.21&lt;/a&gt;, some new components were added to the project and &lt;a href="https://github.com/apache/camel/blob/master/components/camel-wordpress/src/main/docs/wordpress-component.adoc"&gt;Camel WordPress&lt;/a&gt; was one of them. Camel is one of the upstream community projects for &lt;a href="https://developers.redhat.com/products/fuse/overview/"&gt;Red Hat Fuse&lt;/a&gt;. In this article, we will see how to use this new component to publish an auto-generated news post based on a &lt;a href="https://www.football-data.org/"&gt;soccer statistics API&lt;/a&gt;. The example consumes the statistics API, generates the text based on a &lt;a href="https://github.com/simplenlg/simplenlg"&gt;Natural Language Generation (NLG) library&lt;/a&gt; and then publishes it to the WordPress blog.&lt;/p&gt; &lt;p&gt;&lt;a href="https://wordpress.org/"&gt;WordPress&lt;/a&gt; is one of the most used open source tools for creating websites. More than 30% of the web is built on top of WordPress. Besides creating websites, blogs, and apps, WordPress leverages a huge plugin repository maintained by a passionate community. There are even plugins that can turn a WordPress website into an &lt;a href="https://woocommerce.com/"&gt;e-commerce platform&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Since &lt;a href="https://codex.wordpress.org/Version_4.7"&gt;version 4.7&lt;/a&gt;, WordPress exposes a &lt;a href="https://developer.wordpress.org/rest-api/"&gt;REST API&lt;/a&gt; capable of interacting with its resources, for example, users, categories, pages, posts, and custom types. Now it’s possible for third parties to integrate with the WordPress platform and perform almost anything with their resources.&lt;/p&gt; &lt;p&gt;Some companies implement internal websites, blogs, and project sites using WordPress. Integrating such platforms with another company’s components—such as CRM, ERP, LDAP, and Calendar Services—would add extra value to WordPress-based projects. Camel WordPress can help integrate those components easily. To get started using this new component, nothing is better than a demo.&lt;/p&gt; &lt;p&gt;&lt;span id="more-515527"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The demo&lt;/h2&gt; &lt;p&gt;For this demo, we are going to implement a scenario where Apache Camel will generate news describing results of soccer matches based on a soccer statistics API. Then that news will be published on our Soccer News Blog.&lt;/p&gt; &lt;p&gt;This demo was inspired by &lt;a href="https://www.wired.com/2017/02/robots-wrote-this-story/"&gt;news-writing bots&lt;/a&gt; that, in the future, could easily write a couple of paragraphs based on a set of rules, NLG, and AI. Of course, for this simple demonstration, we won’t create anything too fancy. We have a pre-formatted set of templates with possibles results from a soccer match prepared to receive the fixtures from the API. These templates were inspired by the &lt;a href="https://sigarra.up.pt/feup/pt/pub_geral.pub_view?pi_pub_base_id=139549"&gt;dissertation of João Aires called “Automatic Generation of Sports News,”&lt;/a&gt; published by the University of Porto (Portugal).&lt;/p&gt; &lt;p&gt;Take a look at the figure below to understand the demo architecture and the routes flow.&lt;/p&gt; &lt;p&gt;There are two REST endpoints that expose the use cases of this demo. The first one, “summary,” just converts the soccer match details into a news post. The second one, “send,” posts the generated news to our blog. Take your time figuring out the flow.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2.png"&gt;&lt;img class=" size-full wp-image-515537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2.png" alt="" width="769" height="190" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2.png 769w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2-300x74.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2-768x190.png 768w" sizes="(max-width: 769px) 100vw, 769px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Sharp readers will note that we reused some of our routes in two different use cases. Camel is a powerful framework that makes code reuse a lot easier, thanks to its input/output process design. Before starting to code your routes, take your time planning what you’re going to do and try to simplify the routes by breaking them down into smaller pieces. This way, you can achieve a better architecture and clean code.&lt;/p&gt; &lt;p&gt;The REST endpoints are pretty straightforward since we implemented the Camel REST capabilities to expose our routes. If you are not familiar with this feature, take a look at the &lt;a href="http://camel.apache.org/rest-dsl.html"&gt;Camel documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;The routes&lt;/h2&gt; &lt;p&gt;Let’s dig into the Get Fixture Details and Convert to News routes.&lt;/p&gt; &lt;p&gt;The Get Fixture Details route calls a REST endpoint of the &lt;a href="https://www.football-data.org/"&gt;Football Data API&lt;/a&gt;. The API owner was very kind to offer basic usage of his API for free. &lt;a href="https://www.football-data.org/client/register"&gt;We took the free tier&lt;/a&gt; for this demo. If you are going to run this demo, I advise doing the same, since you are going to need an API key.&lt;/p&gt; &lt;p&gt;The route takes as argument the fixture ID of a match, calls the third-party API, and converts its JSON results into our internal domain model (&lt;code&gt;Statistics&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;from("direct:get-fixture-detail") .routeId("get-fixture-details") .setHeader("X-Auth-Token", constant(config.getFootballApiToken())) .toF("rest:get:%s?host=%s&amp;#38;synchronous=true", config.getFootballApiFixturePath(), config.getFootballApiHost()) .unmarshal().json(JsonLibrary.Jackson, Statistics.class);&lt;/pre&gt; &lt;p&gt;With the results of the API in place, it’s time to convert this data into text. For this task, we use the &lt;a href="https://github.com/simplenlg/simplenlg"&gt;Simple NLG library&lt;/a&gt;. This library facilitates the generation of &lt;a href="https://en.wikipedia.org/wiki/Natural_language"&gt;natural language&lt;/a&gt; in English idiom. As an example, let’s create a simple sentence like &lt;i&gt;Mary chases the monkey&lt;/i&gt;:&lt;/p&gt; &lt;pre&gt;SPhraseSpec p = nlgFactory.createClause(); p.setSubject("Mary"); p.setVerb("chase"); p.setObject("the monkey"); String output2 = realiser.realiseSentence(p); System.out.println(output2);&lt;/pre&gt; &lt;p&gt;Note that we only pass to the library the verb in the infinitive form and leave the grammatical rules to the engine. We can even turn this sentence to the past form with a simple argument:&lt;/p&gt; &lt;pre&gt;p.setFeature(Feature.TENSE, Tense.PAST);&lt;/pre&gt; &lt;p&gt;&lt;i&gt;“Mary chased the monkey” &lt;/i&gt;would then be the output.&lt;/p&gt; &lt;p&gt;This is just the tip of the iceberg; you can do much more with NLG libraries. It’s beyond the scope of this article to go deep into NLG, but if you are interested &lt;a href="https://github.com/simplenlg/simplenlg/wiki/Section-0-%E2%80%93-SimpleNLG-Tutorial"&gt;there’s a good tutorial in Github explaining how to use it&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The route responsible for converting the match data into text is called Convert to News, which is a simple &lt;code&gt;bean&lt;/code&gt; call:&lt;/p&gt; &lt;pre&gt;from("direct:convert-nlg") .routeId("convert-nlg") .bean(ContentFactory.class, "generate");&lt;/pre&gt; &lt;p&gt;The domain data to text conversion happens inside the class &lt;code&gt;ContentFactory&lt;/code&gt;. This factory is responsible for coordinating the text generation inside the &lt;code&gt;nlg&lt;/code&gt; package. The figure below illustrates the relationship inside this package in a class diagram. In real-world scenarios, such conversion could be the responsibility of another microservice; this way Camel would handle only the integration part.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/08/nlg-package.png"&gt;&lt;img class=" size-full wp-image-515547 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/nlg-package.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/nlg-package.png" alt="" width="731" height="665" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/nlg-package.png 731w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/nlg-package-300x273.png 300w" sizes="(max-width: 731px) 100vw, 731px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ContentFactory&lt;/code&gt; delegates the summary generation to the &lt;code&gt;IntroTemplate&lt;/code&gt; class, which will create the first paragraph of our news. For demo purposes, it’s a one-sentence only paragraph. You could easily add more content by creating more template classes inside this package, for example, a “best player match” paragraph describing how well a player performed along the match.&lt;/p&gt; &lt;p&gt;If we took a hypothetical match were Germany beats Brazil by the score of 7&amp;#215;1, this engine would generate something like:&lt;/p&gt; &lt;p&gt;&lt;i&gt;On July 8th, Germany visited Brazil to bring home an outstanding victory by the score of 1&amp;#215;7.&lt;/i&gt;&lt;/p&gt; &lt;p&gt;Having generated the match summary, the route outputs it in the form of a domain model called &lt;code&gt;StatisticsSummary&lt;/code&gt;. This domain model contains data about the match summary, the date, and the teams’ names. This structure will be the input to the last route, which will convert this statistics domain into a WordPress post and publish it to our blog.&lt;/p&gt; &lt;p&gt;Finally, we get to the route Send to WordPress. This route will delegate the publication of the post to the Camel WordPress component, having converted the match summary into a WordPress post using the &lt;a href="http://camel.apache.org/type-converter.html"&gt;Camel type converter&lt;/a&gt; feature:&lt;/p&gt; &lt;pre&gt;from("direct:post-news-summary") .routeId("post-news-summary") .convertBodyTo(Post.class) .to("wordpress:post");&lt;/pre&gt; &lt;p&gt;To use the Camel type converter feature, just add the file &lt;a href="https://github.com/ricardozanini/camel-example-wordpress/blob/master/src/main/resources/META-INF/services/org/apache/camel/TypeConverter"&gt;TypeConverter&lt;/a&gt; inside the path &lt;code&gt;services/org/apache/camel&lt;/code&gt; with the fully qualified name of the converter class. Let’s take a look at this class:&lt;/p&gt; &lt;pre&gt;@Converter public final class StatisticsToPostConverter { private static final int DEFAULT_AUTHOR_ID = 1; private static final Logger LOGGER = LoggerFactory.getLogger(StatisticsToPostConverter.class); @Converter public static Post toPost(StatisticsSummary statisticsSummary, Exchange exchange) { final Post post = new Post(); final Content postContent = new Content(statisticsSummary.getSummary()); postContent.setRaw(statisticsSummary.getSummary()); final Content titleContent = new Content(String.format("%s X %s Results", statisticsSummary.getFixture().getHomeTeamName(), statisticsSummary.getFixture().getAwayTeamName())); titleContent.setRaw(titleContent.getRendered()); post.setContent(postContent); post.setFormat(Format.standard); post.setStatus(PublishableStatus.publish); post.setTitle(titleContent); post.setAuthor(DEFAULT_AUTHOR_ID); LOGGER.debug("Converted StatisticsSummary {} to Post {}", statisticsSummary, post); return post; } }&lt;/pre&gt; &lt;p&gt;The responsibility of this converter is to create a new &lt;code&gt;Post&lt;/code&gt; object and populate it according to WordPress rules for a new, published post.&lt;/p&gt; &lt;p&gt;The first lines just set the raw content and format of the post. The post&amp;#8217;s publication status also could be set to &lt;strong&gt;draft&lt;/strong&gt; or &lt;strong&gt;private&lt;/strong&gt;. Draft status will save the post in the WordPress database for later intervention. In the private status, the post will be visible only to administrators. Check for other statuses &lt;a href="https://codex.wordpress.org/Post_Status"&gt;in the WordPress documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The author ID is another important property while creating a new post. If you are not sure, it could be fetched using the author operation by the Camel WordPress plugin or by looking into the WordPress user’s dashboard.&lt;/p&gt; &lt;p&gt;Another important thing to check is the WordPress configuration and connectivity. For the Camel WordPress plugin to work, the plugin &lt;a href="https://github.com/WP-API/Basic-Auth"&gt;Basic Authentication must be installed&lt;/a&gt;. This way, Camel can use HTTP Basic authentication to connect to WordPress and perform write operations.&lt;/p&gt; &lt;p&gt;Future versions of Camel WordPress &lt;a href="https://issues.apache.org/jira/browse/CAMEL-12201"&gt;will use token-based authentication&lt;/a&gt;, which is a more secure and reliable method than HTTP Basic in non-TLS connections. It’s worth noting that you should never use plain HTTP connections to authenticate via HTTP Basic, because credentials are passed in base64 encoded strings and an attacker could easily steal those credentials.&lt;/p&gt; &lt;h2&gt;Camel WordPress configuration&lt;/h2&gt; &lt;p&gt;To get Camel WordPress working, some configuration is needed. This configuration could be done in the &lt;a href="https://github.com/ricardozanini/camel-example-wordpress/blob/master/src/main/java/sample/camel/wordpress/ExampleCamelWordpressRoute.java"&gt;route definition&lt;/a&gt;. There, we’re passing the WordPress URL and user credentials that are able to create new posts:&lt;/p&gt; &lt;pre&gt;final WordPressComponentConfiguration configuration = new WordPressComponentConfiguration(); final WordPressComponent component = new WordPressComponent(); configuration.setUrl(config.getWordpressUrl()); configuration.setPassword(config.getWordpressPassword()); configuration.setUser(config.getWordpressUser()); component.setConfiguration(configuration); getContext().addComponent("wordpress", component);&lt;/pre&gt; &lt;p&gt;All these configurations were externalized using Spring Boot properties injected later into the Camel Context:&lt;/p&gt; &lt;pre&gt;camel.springboot.name=CamelSampleWordpress camel.component.servlet.mapping.context-path=/api/* logging.level.org.apache.http=DEBUG logging.level.org.apache.http.wire=ERROR logging.level.org.restlet=DEBUG logging.level.org.apache.camel=DEBUG football.api.fixture.path=v1/fixtures/{fixtureId} football.api.host=https://api.football-data.org football.api.token=${FOOTBALL_API_TOKEN:&amp;#60;your_api_token&amp;#62;} wordpress.url=${WORDPRESS_URL:http://localhost/wp-json/} wordpress.user=${WORDPRESS_USER:user} wordpress.password=${WORDPRESS_PASS:pass}&lt;/pre&gt; &lt;p&gt;These properties were set in the &lt;code&gt;application.properties&lt;/code&gt; file that later will be available in the class &lt;code&gt;ExampleCamelWordpressRouteConfig&lt;/code&gt; to be used across the routes.&lt;/p&gt; &lt;h2&gt;Running the demo&lt;/h2&gt; &lt;p&gt;To get the demo running &lt;a href="https://github.com/ricardozanini/camel-example-wordpress/blob/master/openshift/camel-wordpress-sample-template.yaml"&gt;we have a Red Hat OpenShift template&lt;/a&gt; that creates a WordPress blog backed by a MySQL database and this Camel demo microservice. Visit the “summary” endpoint to see the NLG engine working:&lt;/p&gt; &lt;pre&gt;curl http://&amp;#60;camel-wp-example-host&amp;#62;/api/match/158186/summary {"fixture":{"date":"2017-05-14T19:00:00.000+0000", "status":"FINISHED" (...)&lt;/pre&gt; &lt;p&gt;To send this summary to the WordPress blog, make a simple GET request to the “send” endpoint:&lt;/p&gt; &lt;pre&gt;curl http://&amp;#60;camel-wp-example-host&amp;#62;/api/match/158186/send {"id":6,"author":1,"date":"2018-08-20T18:05:37.000+0000", "modified":"2018-08-20T18:05:37.000+0000", "slug":"avai-sc-x-ec-vitoria-results-2" (...)&lt;/pre&gt; &lt;p&gt;For the sake of simplicity in this demo, we used the GET verb, but in real-world scenarios it would be preferable to use the POST verb to create new content.&lt;/p&gt; &lt;p&gt;Finally, we should see our news published to the WordPress front page:&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-515567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/wordpress-screenshot.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/wordpress-screenshot.png" alt="" width="905" height="493" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/wordpress-screenshot.png 905w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/wordpress-screenshot-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/wordpress-screenshot-768x418.png 768w" sizes="(max-width: 905px) 100vw, 905px" /&gt;&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;In this article, we&amp;#8217;ve seen how to use Apache Camel to auto-generate news posts with NLG and publish them to a WordPress blog via a soccer public API that retrieves statistics. The Camel WordPress component behaves like the Facebook, Twitter, and others components that integrate with social media to generate new content. Besides creating posts, the component also has author operations that could be used to integrate users&amp;#8217; data across databases.&lt;/p&gt; &lt;p&gt;I hope this example can help you write new integrations and use cases using WordPress. &lt;a href="https://github.com/ricardozanini/camel-example-wordpress"&gt;The full source code is hosted on GitHub&lt;/a&gt; (contributions are welcome!). Stay tuned because we are planning to add many more operations to the Camel WordPress component.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;title=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" data-a2a-url="https://developers.redhat.com/blog/2018/08/27/camel-wordpress-integration/" data-a2a-title="Auto-generating news and publishing it to WordPress with Apache Camel"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/27/camel-wordpress-integration/"&gt;Auto-generating news and publishing it to WordPress with Apache Camel&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/83OBURWkISo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;With the release of Apache Camel 2.21, some new components were added to the project and Camel WordPress was one of them. Camel is one of the upstream community projects for Red Hat Fuse. In this article, we will see how to use this new component to publish an auto-generated news post based on a [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/27/camel-wordpress-integration/"&gt;Auto-generating news and publishing it to WordPress with Apache Camel&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/08/27/camel-wordpress-integration/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">515527</post-id><dc:creator>Ricardo Zanini</dc:creator><dc:date>2018-08-27T11:00:58Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/27/camel-wordpress-integration/</feedburner:origLink></entry><entry><title>Infinispan 9.4.0.CR1 is out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/IbiJ3suvj7s/infinispan-940cr1-is-out.html" /><category term="9.4" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><category term="release candidate" scheme="searchisko:content:tags" /><author><name>Katia Aresti</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_9_4_0_cr1_is_out</id><updated>2018-08-27T08:34:44Z</updated><published>2018-08-27T08:34:00Z</published><content type="html">Dear Infinispan users,&lt;br /&gt;&lt;br /&gt;We have just released &lt;b&gt;9.4.0.CR1&lt;/b&gt; which includes bug fixes and improvements.&lt;br /&gt;&lt;br /&gt;Highlights of this release include:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Near cache and client side TTL (&lt;a href="https://issues.jboss.org/browse/ISPN-9098"&gt;ISPN-9098&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Allow configuring near cache from hot rod properties (&lt;a href="https://issues.jboss.org/browse/ISPN-9385"&gt;ISPN-9385&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Initial support for JSON format in scripts Default analyzers are provided to use with remote queries (&lt;a href="https://issues.jboss.org/browse/ISPN-9429"&gt;ISPN-9429&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Prevent user from configuring passivation with a shared store (&lt;a href="https://issues.jboss.org/browse/ISPN-7168"&gt;ISPN-7168&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Enhance RemoteStore to support segmentation (&lt;a href="https://issues.jboss.org/browse/ISPN-9376"&gt;ISPN-9376&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Upgrade to RxJava 2.2.0 (&lt;a href="https://issues.jboss.org/browse/ISPN-9418" target="_blank"&gt;ISPN-9418&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Hot Rod configuration properties have setters now to ease integration with other frameworks (&lt;a href="https://issues.jboss.org/browse/ISPN-9398"&gt;ISPN-9398&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;The full list of 9.4.0.CR1 fixes are &lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12337826"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;You can find both releases on our &lt;a href="http://infinispan.org/download/"&gt;download page&lt;/a&gt;. Please report any issues in our &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;issue tracker&lt;/a&gt; and join the conversation in our &lt;a href="https://infinispan.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt; to shape up our next release.&lt;br /&gt;&lt;br /&gt;Enjoy,&lt;br /&gt;&lt;br /&gt;The Infinispan Team&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/0Xp0I-lguCg" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/IbiJ3suvj7s" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan users, We have just released 9.4.0.CR1 which includes bug fixes and improvements. Highlights of this release include: Near cache and client side TTL (ISPN-9098)  Allow configuring near cache from hot rod properties (ISPN-9385)  Initial support for JSON format in scripts Default analyzers are provided to use with remote queries (ISPN-9429)  Prevent user from configuring passivation ...</summary><dc:creator>Katia Aresti</dc:creator><dc:date>2018-08-27T08:34:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/0Xp0I-lguCg/infinispan-940cr1-is-out.html</feedburner:origLink></entry><entry><title>Red Hat Partner Community Meetup in the Netherlands</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xkeTIvcVcuI/red-hat-partner-community-meetup-netherlands.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_partner_community_meetup_in_the_netherlands</id><updated>2018-08-27T08:29:49Z</updated><published>2018-08-27T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://www.redhat.com/en/partners" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="red hat partner community" border="0" data-original-height="384" data-original-width="1600" height="76" src="https://2.bp.blogspot.com/-76aI-0337V8/W4O0woHJV6I/AAAAAAAAtBU/sqwIMumGlfQejfbW40QuTNw9gu7QIl5UACLcBGAs/s320/connect.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;While most of what I talk about here is related to open source technologies that reside in the solution portfolio of Red Hat, I'd like to think it's because working with good technology is why you read this content.&lt;br /&gt;&lt;br /&gt;This article is a bit of a plug for something directly related to the business of working with Red Hat technologies and customers. It's about partnering with Red Hat as an organization to further expand your reach and provide your developers / consultants / architects with the chance to work with all of these open source technologies.&lt;br /&gt;&lt;br /&gt;Last week, I was invited to present for the Red Hat Partner Community Meetup in the Netherlands. This is a very unique group of companies known as &lt;a href="https://www.redhat.com/en/global/netherlands#links" target="_blank"&gt;Premier Partners&lt;/a&gt; that can deliver IT services for customers using open source technologies supported by Red Hat.&lt;br /&gt;&lt;br /&gt;My talk was about giving these partners a preview on the application development product portfolio, such as what is coming, timelines and what's driving future direction in the products. Here's a peek at the lead slide, as unless you were in attendance, that's all you're going to get.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://www.redhat.com/en/partners" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="red hat partner community" border="0" data-original-height="893" data-original-width="1600" height="222" src="https://2.bp.blogspot.com/-dwrbx6RuCZM/W4O0jQjrNMI/AAAAAAAAtBQ/Qw_wlCXRP5o0rbgqRN4aAq4BU8_Zth5PgCLcBGAs/s400/partner-community.png" title="" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The question you might be asking yourself is, "How can I get in on sessions like this?"&lt;br /&gt;&lt;br /&gt;That's not as hard as you think, but it does &lt;a href="https://www.redhat.com/en/partners" target="_blank"&gt;involve you getting in touch&lt;/a&gt; about the depth of collaboration with Red Hat, how to get your companies services mentioned, and how to accelerate your open source solutions.&lt;br /&gt;&lt;br /&gt;Hope to welcome you and your teams soon as &lt;a href="https://www.redhat.com/en/partners" target="_blank"&gt;Red Hat Partners&lt;/a&gt;!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ei63EnBqXkY:_d0RkQsn6Do:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ei63EnBqXkY:_d0RkQsn6Do:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ei63EnBqXkY:_d0RkQsn6Do:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ei63EnBqXkY:_d0RkQsn6Do:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/ei63EnBqXkY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xkeTIvcVcuI" height="1" width="1" alt=""/&gt;</content><summary>While most of what I talk about here is related to open source technologies that reside in the solution portfolio of Red Hat, I'd like to think it's because working with good technology is why you read this content. This article is a bit of a plug for something directly related to the business of working with Red Hat technologies and customers. It's about partnering with Red Hat as an organization...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-08-27T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/ei63EnBqXkY/red-hat-partner-community-meetup-netherlands.html</feedburner:origLink></entry><entry><title>Eclipse MicroProfile and Red Hat Update: Thorntail and SmallRye</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2YuOheLyDFs/" /><category term="Announcement" /><category term="Community" /><category term="Java" /><category term="Microservices" /><category term="Modern App Dev" /><category term="MicroProfile" /><category term="microservices" /><category term="SmallRye" /><category term="thorntail" /><category term="wildfly swarm" /><author><name>Antoine Sabot-Durand</name></author><id>https://developers.redhat.com/blog/?p=515407</id><updated>2018-08-23T08:04:42Z</updated><published>2018-08-23T08:04:42Z</published><content type="html">&lt;p&gt;During the last three months, there have been some changes regarding Eclipse MicroProfile at Red Hat. If you haven&amp;#8217;t been following the details, this post recaps what&amp;#8217;s changed and introduces Thorntail and SmallRye.&lt;/p&gt; &lt;h2&gt;Bye-bye WildFly Swarm! Hello Thorntail!&lt;/h2&gt; &lt;p&gt;You may have missed this important news. Our MicroProfile implementation changed its name two months ago.&lt;/p&gt; &lt;p&gt;After a lot of feedback from the community, we decided to rename “WildFly Swarm” to Thorntail. While the former name was nice, we found that the “Swarm” term was a bit overloaded in the IT industry and could be confusing. It’s the same for the “WildFly” part; sharing this name with our Java EE application server was a source of confusion for some users, making them think it was a subproject of WildFly.&lt;/p&gt; &lt;p&gt;&lt;span id="more-515407"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;With the name, we also changed versioning to come back to a more semantic version numbering. Thus the last release version of WildFly Swarm was &lt;a href="http://wildfly-swarm.io/posts/announcing-wildfly-swarm-2018-5-0/"&gt;2018.5.0&lt;/a&gt; and the first version of Thorntail (same code, different name) was &lt;a href="http://wildfly-swarm.io/posts/announcing-thorntail-2-0-0-final/"&gt;2.0.0.Final&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Changing the version numbering makes it easier for us to communicate about new features and have better links to downstream project versions.&lt;/p&gt; &lt;p&gt;You’ll find more information on the project renaming and versioning changes in &lt;a href="https://www.infoq.com/news/2018/05/wildfly-thorntail"&gt;this interview&lt;/a&gt; that Bob McWhirter gave to InfoQ.&lt;/p&gt; &lt;p&gt;As it’s still the same project, renaming has no technical impact on existing projects, but you need to change Maven artifacts &lt;code&gt;groupid&lt;/code&gt; and &lt;code&gt;artifactid&lt;/code&gt; and some plugins name to stick to the new version. All the migration details are listed in the &lt;a href="http://wildfly-swarm.io/posts/announcing-thorntail-2-0-0-final/"&gt;Thorntail 2.0.0.final release notes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You’ll find everything you need to know about using or contributing to Thorntail at &lt;a href="http://thorntail.io"&gt;thorntail.io&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Here comes SmallRye, a shared MicroProfile implementation&lt;/h2&gt; &lt;p&gt;A few months ago, Ken Finnigan launched a discussion on the MicroProfile mailing list to start an initiative around MicroProfile implementations.&lt;/p&gt; &lt;p&gt;MicroProfile is a fast-moving target and has evolved a lot since it was announced two years ago. Keeping track of this fast evolution in specifications and the matching implementations requires a lot of energy for all vendors, so Ken proposed to put the common parts of these implementation efforts into a single vendor-neutral implementation of MicroProfile, whose project name is SmallRye.&lt;/p&gt; &lt;p&gt;At &lt;a href="https://www.smallrye.io/"&gt;smallrye.io&lt;/a&gt; you can see that this community-driven project is doing well: all MicroProfile specifications now have their own implementation.&lt;/p&gt; &lt;p&gt;Source code can be checked at the &lt;a href="https://github.com/smallrye"&gt;SmallRye GitHub&lt;/a&gt; repository.&lt;/p&gt; &lt;p&gt;Thorntail, in its 2.1.0.Final version, is the first MicroProfile container to use the SmallRye implementation.&lt;/p&gt; &lt;p&gt;So now, in addition to contributing to all MicroProfile specifications, you can also contribute to an implementation that will benefit the entire community, thanks to SmallRye.&lt;/p&gt; &lt;h2&gt;What’s next?&lt;/h2&gt; &lt;p&gt;The Thorntail team is working on a lot of nice stuff for the future for the MicroProfile community and Red Hat customers.&lt;/p&gt; &lt;p&gt;For instance, the upcoming Thorntail version will start using Java EE 8 specifications like CDI 2.0 or JAX-RS 2.1 and SmallRye will support MicroProfile 1.4 in its next version.&lt;/p&gt; &lt;p&gt;If you want to stay up to date you can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Follow us on &lt;a href="https://twitter.com/thorntail_io"&gt;Twitter&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Check our &lt;a href="https://groups.google.com/forum/#!forum/thorntail"&gt;Google group&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Chat with the other community members on IRC: #Thorntail channel on freenode.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See you around!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;title=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" data-a2a-url="https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/" data-a2a-title="Eclipse MicroProfile and Red Hat Update: Thorntail and SmallRye"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/"&gt;Eclipse MicroProfile and Red Hat Update: Thorntail and SmallRye&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2YuOheLyDFs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;During the last three months, there have been some changes regarding Eclipse MicroProfile at Red Hat. If you haven&amp;#8217;t been following the details, this post recaps what&amp;#8217;s changed and introduces Thorntail and SmallRye. Bye-bye WildFly Swarm! Hello Thorntail! You may have missed this important news. Our MicroProfile implementation changed its name two months ago. After [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/"&gt;Eclipse MicroProfile and Red Hat Update: Thorntail and SmallRye&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">515407</post-id><dc:creator>Antoine Sabot-Durand</dc:creator><dc:date>2018-08-23T08:04:42Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/</feedburner:origLink></entry><entry><title>All Things Open 2018 - 10 Steps to Cloud Happiness</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Oi-JOTOuNvw/all-things-open-2018-10-steps-cloud-happiness.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Cloud Suite" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="xpaas" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-all_things_open_2018_10_steps_to_cloud_happiness</id><updated>2018-08-23T07:06:30Z</updated><published>2018-08-23T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://allthingsopen.org/" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="all things open" border="0" data-original-height="308" data-original-width="496" height="197" src="https://2.bp.blogspot.com/-sodYr5mY64g/Wo7R2DIs8aI/AAAAAAAAry8/DZCEfSc6oScIuAvQ3pM9whDhNlWbUmFZQCLcBGAs/s320/all-things-open.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;As &lt;a href="http://www.schabell.org/2018/02/all-things-open-2018-career-cloud-opensource.html" target="_blank"&gt;previously mentioned&lt;/a&gt;, I'm a big fan of the&amp;nbsp;&lt;a href="https://allthingsopen.org/" target="_blank"&gt;All Things Open&lt;/a&gt;&amp;nbsp;conference.&lt;br /&gt;&lt;br /&gt;This year it's in Raleigh, North Carolina from Oct 21-23 and &lt;a href="https://allthingsopen.org/speakers/eric-d-schabell/" target="_blank"&gt;I submitted a few talks&lt;/a&gt; to make sure I would be there.&lt;br /&gt;&lt;br /&gt;The talks ranged in topics from cloud application development, ensuring success on your open source journey, jump starting a career in open source, to emerging technologies.&lt;br /&gt;&lt;br /&gt;Low an behold, the following talk was accepted and I'll get to meet all the great attendees in North Carolina soon.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://3.bp.blogspot.com/-JSfsv5SHaZU/W35cxEg2LbI/AAAAAAAAtAc/rwTNYcEjCv8Hrp5HXZ7ZAPi7haxR10yEwCLcBGAs/s1600/10-step-journey.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" data-original-height="719" data-original-width="1272" height="180" src="https://3.bp.blogspot.com/-JSfsv5SHaZU/W35cxEg2LbI/AAAAAAAAtAc/rwTNYcEjCv8Hrp5HXZ7ZAPi7haxR10yEwCLcBGAs/s320/10-step-journey.png" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href="https://allthingsopen.org/talk/10-steps-to-cloud-happiness/" target="_blank"&gt;10 Steps to Cloud Happiness&lt;/a&gt;&lt;/h3&gt;&lt;i&gt;A modern developers world is full of new tools, new technologies and getting started can become a bit daunting. Let's take a tour of how to get started with containers, Cloud and some examples so that you have your very own private PaaS Cloud on your laptop. You'll be given a private Cloud in minutes that turns your laptop into a container platform where you then can explore a multitude of example projects from such domains as retail, travel, finance and more. Hold on to your developer hats as we get you started on application development in the Cloud with open technologies, Ansible deployment automation and container-based fun. Everything you're shown in this session is available for attendees to explore online and hands-on once they've returned home.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt; &lt;i&gt;Date: Monday, OCT 22&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Time: 04:15 PM, local time&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Room: 303&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Hope to &lt;a href="https://allthingsopen.org/speakers/eric-d-schabell/" target="_blank"&gt;see you there&lt;/a&gt;!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=s19RC_PBJgw:AgQybTC5-lk:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=s19RC_PBJgw:AgQybTC5-lk:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=s19RC_PBJgw:AgQybTC5-lk:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=s19RC_PBJgw:AgQybTC5-lk:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=s19RC_PBJgw:AgQybTC5-lk:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=s19RC_PBJgw:AgQybTC5-lk:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=s19RC_PBJgw:AgQybTC5-lk:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=s19RC_PBJgw:AgQybTC5-lk:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=s19RC_PBJgw:AgQybTC5-lk:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=s19RC_PBJgw:AgQybTC5-lk:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=s19RC_PBJgw:AgQybTC5-lk:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/s19RC_PBJgw" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Oi-JOTOuNvw" height="1" width="1" alt=""/&gt;</content><summary>As previously mentioned, I'm a big fan of the All Things Open conference. This year it's in Raleigh, North Carolina from Oct 21-23 and I submitted a few talks to make sure I would be there. The talks ranged in topics from cloud application development, ensuring success on your open source journey, jump starting a career in open source, to emerging technologies. Low an behold, the following talk wa...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-08-23T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/s19RC_PBJgw/all-things-open-2018-10-steps-cloud-happiness.html</feedburner:origLink></entry><entry><title>Hibernate Validator 6.0.13.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/n-ej6b0BMTM/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate Validator" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Guillaume Smet</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_validator_6_0_13_final_released</id><updated>2018-08-23T14:31:51Z</updated><published>2018-08-23T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We just released Hibernate Validator 6.0.13.Final which comes with very few changes.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It will be the version included in WildFly 14.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This is a recommended upgrade for everyone using Hibernate Validator and it is a drop-in replacement for 6.0.12.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We fixed two minor issues:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HV-1650"&gt;HV-1650&lt;/a&gt; - French translations are badly encoded - this one was reported and fixed by Audrey Romanet&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HV-1652"&gt;HV-1652&lt;/a&gt; - Fix a few theoretical null pointer dereference issues&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="getting-6-0-13-final"&gt;&lt;a class="anchor" href="#getting-6-0-13-final"&gt;&lt;/a&gt;Getting 6.0.13.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get the release with Maven, Gradle etc. use the following GAV coordinates:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;org.hibernate.validator:hibernate-validator:6.0.13.Final&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;org.hibernate.validator:hibernate-validator-cdi:6.0.13.Final&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;org.hibernate.validator:hibernate-validator-annotation-processor:6.0.13.Final&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Note that the group id has changed from &lt;code&gt;org.hibernate&lt;/code&gt; (Hibernate Validator 5 and earlier) to &lt;code&gt;org.hibernate.validator&lt;/code&gt; (from Hibernate Validator 6 onwards).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Alternatively, a distribution bundle containing all the bits is provided on SourceForge (&lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/6.0.13.Final/hibernate-validator-6.0.13.Final-dist.tar.gz/download"&gt;TAR.GZ&lt;/a&gt;, &lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/6.0.13.Final/hibernate-validator-6.0.13.Final-dist.zip/download"&gt;ZIP&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you want to benefit from the new features of this version on WildFly, we also provide WildFly patches for &lt;a href="http://search.maven.org/remotecontent?filepath=org/hibernate/validator/hibernate-validator-modules/6.0.13.Final/hibernate-validator-modules-6.0.13.Final-wildfly-13.0.0.Final-patch.zip"&gt;WildFly 13&lt;/a&gt; and &lt;a href="http://search.maven.org/remotecontent?filepath=org/hibernate/validator/hibernate-validator-modules/6.0.13.Final/hibernate-validator-modules-6.0.13.Final-wildfly-14.0.0.Beta1-patch.zip"&gt;WildFly 14 Beta1&lt;/a&gt;. You can read about how to apply such patches &lt;a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_updating_hibernate_validator_in_wildfly"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-next"&gt;&lt;a class="anchor" href="#what-s-next"&gt;&lt;/a&gt;What’s next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our efforts are now directed towards the new 6.1, which will introduce some structuring changes such as allowing getters with non standard names (&lt;code&gt;name()&lt;/code&gt; instead of &lt;code&gt;getName()&lt;/code&gt; for instance) and JSON validation support.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/tagged/hibernate-validator"&gt;hibernate-validator tag on Stack Overflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-validator"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HV"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/beanvalidation-dev/"&gt;Bean Validation development mailing list&lt;/a&gt; (discussions about the Bean Validation specification)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/n-ej6b0BMTM" height="1" width="1" alt=""/&gt;</content><summary>We just released Hibernate Validator 6.0.13.Final which comes with very few changes. It will be the version included in WildFly 14. This is a recommended upgrade for everyone using Hibernate Validator and it is a drop-in replacement for 6.0.12.Final. What’s new We fixed two minor issues: HV-1650 - French translations are badly encoded - this one was reported and fixed by Audrey Romanet HV-1652 - F...</summary><dc:creator>Guillaume Smet</dc:creator><dc:date>2018-08-23T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/08/23/hibernate-validator-6013-final-out/</feedburner:origLink></entry><entry><title>Reducing data inconsistencies with Red Hat Process Automation Manager</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ezE6-v3_6Os/" /><category term="Integration" /><category term="JBoss BPM Suite" /><category term="BPM" /><category term="data" /><category term="data reconciliation" /><category term="digital process automation" /><category term="process" /><category term="process automation" /><category term="process automation manager" /><author><name>Donato Marrazzo</name></author><id>https://developers.redhat.com/blog/?p=514787</id><updated>2018-08-22T16:08:39Z</updated><published>2018-08-22T16:08:39Z</published><content type="html">&lt;p&gt;Managing data reconciliation through a specific process is a common necessity for projects that require Digital Process Automation (formerly known as Business Process Management), and &lt;a href="https://developers.redhat.com/products/rhpam/overview/"&gt;Red Hat Process Automation Manager&lt;/a&gt; helps to address such a requirement. This article provides good practices and a technique for satisfying data reconciliation in a structured and clean way.&lt;/p&gt; &lt;p&gt;Red Hat Process Automation Manager was formerly known as Red Hat JBoss BPM Suite, so it&amp;#8217;s worth mentioning that &lt;a href="http://jbpm.org/"&gt;jBPM&lt;/a&gt; is the upstream project that fuels Process Automation Manager. The blog post &lt;a href="https://middlewareblog.redhat.com/2018/07/18/from-bpm-and-business-automation-to-digital-automation-platforms/"&gt;From BPM and business automation to digital automation platforms&lt;/a&gt; explains the reasons behind the new name and shares exciting news for this major release.&lt;span id="more-514787"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Data reconciliation&lt;/h2&gt; &lt;p&gt;During a process&amp;#8217;s life, data is collected from systems and humans, mixed and enriched, and then transferred to other systems. Along the way, a system might not be aligned with other systems and a specific call might end up in an exception state that has to be handled in order to successfully complete the process instance.&lt;/p&gt; &lt;p&gt;There are many reasons for data inconsistencies. Among others, the most common are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;User input is inaccurate&lt;/li&gt; &lt;li&gt;The source of the information is out of date or erroneous&lt;/li&gt; &lt;li&gt;The destination of the information is outdated or erroneous&lt;/li&gt; &lt;li&gt;The destination system already contains the inserted data&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Sometimes, it&amp;#8217;s sufficient to manage the exception automatically and unwind the process with a set of actions to preserve the data integrity. In other cases, the user must decide how to solve the inconsistency. This approach is known as &lt;em&gt;data reconciliation&lt;/em&gt;—when the system catches an exception, it creates a new user task, and the user has three options: retry, change the data and retry, or re-throw the exception.&lt;/p&gt; &lt;p&gt;This is the basic requirement, but sometimes an organization requires a sophisticated process to handle the exception. For example, the organization might want to manage a &amp;#8220;triage&amp;#8221; process which requires that when the first error detection occurs, the error is routed to the specific information stakeholder who can decide which resolution strategy is correct. For example, the user might understand that the failing system needs an update before retrying to insert the data again. Conversely, the information stakeholder might know that the error comes from another system or by a human mistake, so he can change the data (the&lt;i&gt; request payload&lt;/i&gt;) in order to successfully complete the process.&lt;/p&gt; &lt;p&gt;With the last option, the user thinks that the process is unrecoverable, so the best action is to re-throw the exception to the process engine. In this case, it&amp;#8217;s important that the process is designed to handle the exception and gracefully unwind the process instance by calling the compensation logic and leaving a clean situation.&lt;/p&gt; &lt;h2&gt;Exception handling with decorum&lt;/h2&gt; &lt;p&gt;The usual approach is to wrap the external system interaction with a sub-process that manages the exceptional situation. In this way, whenever the &amp;#8220;business process&amp;#8221; has to deal with an external system where data reconciliation is expected, the designer has to call the sub-process that engages the user for the resolution.&lt;/p&gt; &lt;p&gt;Even if this approach works, it has the big disadvantage of creating a new process instance for each system interaction that requires reconciliation in case of errors. For example, when a process is completed that contains three calls to systems that require such extra care, the process administrator will see four process instances. Even if the sub-process life is really short, it represents an overhead and leaves the process history cluttered.&lt;/p&gt; &lt;p&gt;With &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/process-automation-manager"&gt;Red Hat Process Automation Manager&lt;/a&gt;, it&amp;#8217;s possible to address this problem with a really elegant solution: the Exception Handling Decorators.&lt;/p&gt; &lt;p&gt;In general, the &lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;decorator pattern&lt;/a&gt; is a way to add a new behavior to an existing class. It&amp;#8217;s similar to inheritance but has the benefit that it can be added at runtime. In this specific use case, it&amp;#8217;s used to manage the work item exception. Since any remote call to an external system is managed by a Work Item Handler, we can leverage the decorator to catch the exception and create on the fly a process to manage it when needed.&lt;/p&gt; &lt;p&gt;The idea is quite simple and the flexibility of the runtime enables it. In the following repository, you will find an implementation that works pretty well, but you are free to extend and improve it: &lt;a href="https://github.com/dmarrazzo/proc-decorator"&gt;decorator project&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;The decorator in action&lt;/h2&gt; &lt;p&gt;To understand how the decorator works in practice, you have to compile and install it in a Maven repository that is reachable by the &lt;i&gt;Process Server&lt;/i&gt; (sometimes known as the &lt;i&gt;Kie server&lt;/i&gt;). If you have a standalone installation in your local machine, it&amp;#8217;s enough to issue the following command:&lt;/p&gt; &lt;p&gt;&lt;code&gt;mvn install&lt;/code&gt;&lt;/p&gt; &lt;p&gt;In the following repository, you will find a sample Process Automation Manager project that leverages the decorator to implement the data reconciliation strategy: &lt;a href="https://github.com/dmarrazzo/proc-decorator-usage"&gt;decorator usage project&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Clone it in your Business Central repository to inspect the content and deploy it.&lt;/p&gt; &lt;p&gt;The project &lt;code&gt;proc-decorator-usage&lt;/code&gt; defines the decorator as a dependency in its own &lt;code&gt;pom.xml&lt;/code&gt; file, and then the configuration relies on the &lt;code&gt;work-item-handlers&lt;/code&gt; section of the &lt;code&gt;kie-deployment-descriptor.xml&lt;/code&gt; file. For the sake of simplicity, in this sample, the decorator replaces the standard REST Work Item Handler, but if you want to restrict the influence of the decorator to a subset of REST calls, you can create another Work Item Handler definition (for example, ReconciledRest).&lt;/p&gt; &lt;p&gt;The following screenshot shows the Business Central view where the decorator is defined:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-medium wp-image-514807 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_001-1024x461.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_001-300x135.png" alt="" width="300" height="135" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_001-300x135.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_001-768x346.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_001-1024x461.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_001.png 1507w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;In the Work Item Handler definition, there is the &lt;b&gt;name&lt;/b&gt; that uniquely identifies the reusable service task and the &lt;b&gt;constructor initialization&lt;/b&gt; (using an MVEL expression): &lt;code&gt;new example.ProcessTaskHandlerDecorator( org.jbpm.process.workitem.rest.RESTWorkItemHandler.class, runtimeManager)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The first parameter is the class of the Work Item Handler that the decorator will surround. In this example, there is the REST Work Item Handler, but the same decorator can be used for any kind of Work Item Handler: the Web Services one or a custom one. The second parameter is the instance of Runtime Manager used internally by the decorator.&lt;/p&gt; &lt;p&gt;The decorator has other constructors:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;ProcessTaskHandlerDecorator( Class&amp;#60;? extends WorkItemHandler&amp;#62; originalTaskHandlerClass, RuntimeManager runtimeManager, String processId )&lt;/code&gt;. This constructor requires an extra parameter: the process ID of the reconciliation process (for example, &lt;code&gt;src.exception-handling&lt;/code&gt;). With this constructor, the reconciliation process is defined once instead of passing it in every task, but the side effect is that the reconciliation process is the same for all tasks.&lt;/li&gt; &lt;li&gt;&lt;code&gt;ProcessTaskHandlerDecorator( RuntimeManager runtimeManager )&lt;/code&gt; This construct omits the &lt;code&gt;originalTaskHandlerClass&lt;/code&gt; and uses the REST one by default.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code&gt;main-proc&lt;/code&gt; is a fictitious process with two service calls: Other System and Failing System. The latter is the REST call that is configured to fail and will trigger the decorator logic to manage the reconciliation logic. This chain of calls is wrapped with exception handling logic. If the exception reaches this level, it means that the reconciliation process was not able to repair the failure and the only option is to give up that instance and abort everything. Technically, it&amp;#8217;s a managed throwing back of the original exception to the main process. It&amp;#8217;s a good practice to design the process to manage the unexpected such that the process is gracefully unwound: the goal is to leave a clean situation. This is often managed with compensation logic such as this: cancel the reservation, invalidate a record, and send an email to warn that the process failed. Here is a diagram of &lt;code&gt;main-proc&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-medium wp-image-514817 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_002.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_002-300x147.png" alt="main process" width="300" height="147" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_002-300x147.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_002-768x376.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_002.png 934w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;Failing System is a standard REST call with all the parameters that the REST Work Item Handler expects except that the &lt;code&gt;processId&lt;/code&gt; parameter is used by the decorator to identify the process to start when a reconciliation is required. The request is designed to fail, because the URL is &lt;code&gt;http://localhost&lt;/code&gt;. So unless the host has an HTTP server listening on port 80, it will raise an exception and the decorator will show its behavior.&lt;/p&gt; &lt;p&gt;&lt;code&gt;exception-handling&lt;/code&gt; is the process in charge of the reconciliation. The decorator will trigger it when an exception is raised by the Failing System, which is always in our test case, but in real cases, the main process completes its normal life without engaging the reconciliation process. The following is a diagram of the sample reconciliation process.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-medium wp-image-514827 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_003.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_003-300x127.png" alt="sample reconciliation process" width="300" height="127" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_003-300x127.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_003.png 516w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;exception-handling&lt;/code&gt; is the simplest possible process for managing the reconciliation: one human task and a gateway to the &lt;i&gt;normal end&lt;/i&gt; or to the &lt;i&gt;error end&lt;/i&gt;. The &lt;b&gt;human task&lt;/b&gt; form contains the following fields:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Url&lt;/b&gt; to change the endpoint of the REST Request. In the test case context, it is useful to switch the request on a working endpoint and simulate a successful retry.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Information&lt;/b&gt; to change the request payload and ask for a retry.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Exception&lt;/b&gt; flagging. This is when the user closes the reconciliation process with a failure. It means that it&amp;#8217;s not possible to find a solution and the original error is sent back to the originator process (&lt;code&gt;main-proc&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;&lt;b&gt;Retry&lt;/b&gt; if the previous field is false. This controls the retry behavior. If this field is true, the call to the external system is issued again using the parameters changed above in the form. If this field is false, the Failing System task is flagged as done and the main process can continue its life. From a reconciliation point of view, this means that the user has fixed the problem with other tools (outside of Process Automation Manager).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The decorator transfers all the input parameters of the task to the &lt;code&gt;exception-handling&lt;/code&gt; process, so the user can inspect and change the input parameters that caused the exception. In fact, when the exception handling process is completed successfully and a retry is requested, the decorator executes again the original task logic with the updated parameters (the REST call, in this case). By the way, if the second execution fails, a new reconciliation process is instantiated and so forth.&lt;/p&gt; &lt;p&gt;The following steps show the runtime behavior:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Build and deploy the &lt;code&gt;proc-decorator-usage&lt;/code&gt; project.&lt;/li&gt; &lt;li&gt;Launch &lt;code&gt;main-proc&lt;/code&gt; in the Process Definition view. Fill in the process form with any data and click&lt;b&gt; submit&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;The process instance page is opened. Click&lt;b&gt; Diagram&lt;/b&gt;; there you can notice that the Failing System is highlighted. The fact that a process is waiting on a REST task denotes that the decorator is working. The default REST task behavior is synchronous. The external request is issued and the result must come back within the timeout limits; otherwise, an exception is raised and the process handles the exception immediately. In the case of error, the decorator changes the normal REST task behavior to asynchronous behavior; the process execution is suspended and waits for the completion of the reconciliation process. The following is a diagram of the main process waiting for reconciliation. &lt;img class=" alignnone size-medium wp-image-514837 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_004.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_004-300x149.png" alt="main process waiting reconciliation" width="300" height="149" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_004-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_004-768x380.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_004.png 929w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/li&gt; &lt;li&gt;Switch to the Process Instances view. You should find two active process instances: &lt;code&gt;main-proc&lt;/code&gt; and &lt;code&gt;exception-handling&lt;/code&gt;. The latter was instantiated by the decorator. This screenshot shows the process instances list. &lt;img class=" alignnone size-medium wp-image-514847 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_005.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_005-300x121.png" alt="process instances list" width="300" height="121" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_005-300x121.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_005-768x309.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/data-reconciliation_005.png 1017w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/li&gt; &lt;li&gt;Switch to the Tasks view. The exception task is created for the person in charge of the reconciliation. In this sample, all users can work on this task but in real cases, it should be routed to the people responsible for the Failing System. It&amp;#8217;s possible to extend this sample by adding an input parameter to the failing task to identify the users in charge of the reconciliation for that task; then, that parameter can be used to dynamically assign the potential owners of the human task.&lt;/li&gt; &lt;li&gt;Open, claim, and start the task. You can test three possible routes: &lt;ul&gt; &lt;li&gt;&lt;b&gt;don&amp;#8217;t retry:&lt;/b&gt; Just complete the task. This will close successfully the reconciliation process and flag as completed the Failing System task. Then even the &lt;code&gt;main-proc&lt;/code&gt; will complete.&lt;/li&gt; &lt;li&gt;&lt;b&gt;retry:&lt;/b&gt; Flag retry, change the information fields and provide a URL to match an existing HTTP POST endpoint. Eventually, use &lt;a href="https://www.soapui.org/"&gt;SoapUI&lt;/a&gt; or another similar tool to mock up a REST service and check the modified payload. If the REST call will succeed (get back an HTTP 200-level response), the processes will even be completed successfully. Otherwise, the first &lt;code&gt;exception-handling&lt;/code&gt; process will be completed and a new one is started while &lt;code&gt;main-proc&lt;/code&gt; still waits.&lt;/li&gt; &lt;li&gt;&lt;b&gt;re-throw exception:&lt;/b&gt; Finally, flag the exception field to simulate the reconciliation failure. The decorator will throw the original exception to &lt;code&gt;main-proc&lt;/code&gt;. Check in the log for the graceful unwind script execution. The &lt;code&gt;main-proc&lt;/code&gt; process will complete, whereas the &lt;code&gt;exception-handling&lt;/code&gt; process is aborted, because it reaches the &lt;i&gt;error end&lt;/i&gt; node.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;There&amp;#8217;s a final consideration: in this sample, the exception form is bound to a specific data object (Information). It&amp;#8217;s possible to create a user interface for the reconciliation task that is able to render a generic object and, in such a way, to have one reconciliation process to handle different payloads.&lt;/p&gt; &lt;h2&gt;Analyzing the decorator implementation&lt;/h2&gt; &lt;p&gt;This section provides a brief description of the decorator implementation. The &lt;a href="https://github.com/dmarrazzo/proc-decorator"&gt;source code&lt;/a&gt; contains some interesting examples of Process Automation Manager API usage.&lt;/p&gt; &lt;h3&gt;ProcessTaskHandlerDecorator&lt;/h3&gt; &lt;p&gt;It extends the &lt;code&gt;org.jbpm.bpmn2.handler.AbstractExceptionHandlingTaskHandler&lt;/code&gt; class that is provided by the Process Automation Manager libraries and implements the decorator pattern for &lt;i&gt;Work Item Handlers&lt;/i&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;handleExecuteException&lt;/code&gt;. This method is called when an exception happens in the decorated Work Item Handler while running the &lt;code&gt;executeWorkItem&lt;/code&gt; method. It starts the reconciliation process and attaches a completion listener implemented by the &lt;code&gt;ErrorHandlingCompletion&lt;/code&gt; class. All input parameters of the decorated Work Item Handler are transferred to the reconciliation process.&lt;/li&gt; &lt;li&gt;&lt;code&gt;handleAbortException&lt;/code&gt;. This method is called when an exception happens in the decorated Work Item Handler while running the &lt;code&gt;abortWorkItem&lt;/code&gt; method. The decorator just logs the situation.&lt;/li&gt; &lt;li&gt;&lt;code&gt;rethrowException&lt;/code&gt;. This method re-throws the original exception to the process containing the failing Work Item Handler. It&amp;#8217;s called by the &lt;code&gt;ErrorHandlingCompletion&lt;/code&gt; class.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;ProcessCompletionListener&lt;/h3&gt; &lt;p&gt;This is an abstract class that listens to a specific process instance completion. The sub-class has to implement two methods: &lt;code&gt;processCompleted&lt;/code&gt;, which is called upon successful completion, and &lt;code&gt;processAborted&lt;/code&gt;, which is called when the process reaches an &lt;em&gt;error end&lt;/em&gt; node. This abstract class is designed to be reusable even in other contexts.&lt;/p&gt; &lt;h3&gt;ErrorHandlingCompletion&lt;/h3&gt; &lt;p&gt;It extends the previous abstract class and handles the reconciliation process completion.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;processCompleted&lt;/code&gt; is executed when the reconciliation process completes normally. If the retry variable is true, the process variables override the original input parameters of the decorated Work Item Handler and it is executed again. Otherwise, the decorated Work Item Handler is closed as aborted (&lt;code&gt;abortWorkItem&lt;/code&gt;). It&amp;#8217;s arguable if a not-executed task should be considered aborted or completed, but in both cases, the containing process continues its normal execution.&lt;/li&gt; &lt;li&gt;&lt;code&gt;processAborted&lt;/code&gt; is executed when the reconciliation process completes with an &lt;i&gt;error end&lt;/i&gt; node. The original error is thrown back to the main process.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/process-automation-manager"&gt;Red Hat Process Automation Manager&lt;/a&gt; is a powerful technology for reducing data inconsistencies across different systems, which is one of the key benefits provided by a Digital Process Automation initiative. This article proposes a general approach and a reusable asset that streamlines process design.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F22%2Freducing-data-inconsistencies-with-red-hat-process-automation-manager%2F&amp;#38;linkname=Reducing%20data%20inconsistencies%20with%20Red%20Hat%20Process%20Automation%20Manager" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F22%2Freducing-data-inconsistencies-with-red-hat-process-automation-manager%2F&amp;#38;linkname=Reducing%20data%20inconsistencies%20with%20Red%20Hat%20Process%20Automation%20Manager" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F22%2Freducing-data-inconsistencies-with-red-hat-process-automation-manager%2F&amp;#38;linkname=Reducing%20data%20inconsistencies%20with%20Red%20Hat%20Process%20Automation%20Manager" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F22%2Freducing-data-inconsistencies-with-red-hat-process-automation-manager%2F&amp;#38;linkname=Reducing%20data%20inconsistencies%20with%20Red%20Hat%20Process%20Automation%20Manager" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F22%2Freducing-data-inconsistencies-with-red-hat-process-automation-manager%2F&amp;#38;linkname=Reducing%20data%20inconsistencies%20with%20Red%20Hat%20Process%20Automation%20Manager" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F22%2Freducing-data-inconsistencies-with-red-hat-process-automation-manager%2F&amp;#38;linkname=Reducing%20data%20inconsistencies%20with%20Red%20Hat%20Process%20Automation%20Manager" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F22%2Freducing-data-inconsistencies-with-red-hat-process-automation-manager%2F&amp;#38;linkname=Reducing%20data%20inconsistencies%20with%20Red%20Hat%20Process%20Automation%20Manager" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F22%2Freducing-data-inconsistencies-with-red-hat-process-automation-manager%2F&amp;#38;linkname=Reducing%20data%20inconsistencies%20with%20Red%20Hat%20Process%20Automation%20Manager" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F22%2Freducing-data-inconsistencies-with-red-hat-process-automation-manager%2F&amp;#38;title=Reducing%20data%20inconsistencies%20with%20Red%20Hat%20Process%20Automation%20Manager" data-a2a-url="https://developers.redhat.com/blog/2018/08/22/reducing-data-inconsistencies-with-red-hat-process-automation-manager/" data-a2a-title="Reducing data inconsistencies with Red Hat Process Automation Manager"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/22/reducing-data-inconsistencies-with-red-hat-process-automation-manager/"&gt;Reducing data inconsistencies with Red Hat Process Automation Manager&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ezE6-v3_6Os" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Managing data reconciliation through a specific process is a common necessity for projects that require Digital Process Automation (formerly known as Business Process Management), and Red Hat Process Automation Manager helps to address such a requirement. This article provides good practices and a technique for satisfying data reconciliation in a structured and clean way. Red [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/22/reducing-data-inconsistencies-with-red-hat-process-automation-manager/"&gt;Reducing data inconsistencies with Red Hat Process Automation Manager&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/08/22/reducing-data-inconsistencies-with-red-hat-process-automation-manager/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">514787</post-id><dc:creator>Donato Marrazzo</dc:creator><dc:date>2018-08-22T16:08:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/22/reducing-data-inconsistencies-with-red-hat-process-automation-manager/</feedburner:origLink></entry><entry><title>Unit testing constraints with business input from Excel or LibreOffice</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vGKzDrM4BZk/UnitTestingConstraintsWithBusinessInputFromExcelOrLibreOffice.html" /><category term="feed_group_name_optaplanner" scheme="searchisko:content:tags" /><category term="feed_name_optaplanner" scheme="searchisko:content:tags" /><category term="useCase" scheme="searchisko:content:tags" /><author><name>MusaTalluzi</name></author><id>searchisko:content:id:jbossorg_blog-unit_testing_constraints_with_business_input_from_excel_or_libreoffice</id><updated>2018-08-22T07:18:49Z</updated><published>2018-08-21T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The business experts explain the business constraints to us, the developers. But how can we be sure that we understood them correctly? Or worse, how can we test that they agree among themselves once the constraints are formalized?&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Well, there’s one great way to do that: JUnit tests populated by &lt;code&gt;*.xlsx&lt;/code&gt; data. We allow them to recreate a small subset of the solution in Excel/LibreOffice and let them decide how many constraints match. Then our JUnit tests check if our constraint implementations adhere to those requirements.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_traditional_unit_tests"&gt;Traditional unit tests&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In &lt;a href="https://www.optaplanner.org/learn/useCases/conferenceScheduling.html"&gt;Conference Scheduling example&lt;/a&gt;, to test room conflict constraint (hard penalty per pair of talks in the same room in overlapping timeslots) write:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Test public void roomConflict() { TalkType talkType = new TalkType(0L, "type1"); Talk talk1 = new Talk(1L) .withTalkType(talkType) .withSpeakerList(Collections.emptyList()) .withRequiredRoomTagSet(Collections.emptySet()) ... Talk talk2 = new Talk(2L) ... LocalDateTime start1 = LocalDateTime.of(2018, 1, 1, 9, 0); LocalDateTime end1 = LocalDateTime.of(2018, 1, 1, 10, 0); LocalDateTime start2 = LocalDateTime.of(2018, 1, 1, 9, 30); LocalDateTime end2 = LocalDateTime.of(2018, 1, 1, 10, 30); LocalDateTime start3 = LocalDateTime.of(2018, 1, 1, 10, 0); LocalDateTime end3 = LocalDateTime.of(2018, 1, 1, 11, 0); Timeslot slot1 = new Timeslot(1L) .withTalkTypeSet(Collections.singleton(talkType)) .withStartDateTime(start1) .withEndDateTime(end1); Timeslot slot2 = new Timeslot(2L) ... Timeslot slot3 = new Timeslot(3L) ... Room room1 = new Room(1L) .withTalkTypeSet(Collections.singleton(talkType)) .withUnavailableTimeslotSet(Collections.emptySet()); ConferenceSolution solution = new ConferenceSolution(1L) .withTalkTypeList(Collections.singletonList(talkType)) ... scoreVerifier.assertHardWeight(ROOM_CONFLICT, 0, solution); // Talks in same room without overlapping time slots talk1.withRoom(room1).withTimeslot(slot1); talk2.withRoom(room1).withTimeslot(slot3); scoreVerifier.assertHardWeight(ROOM_CONFLICT, 0, solution); // Talks in same room with overlapping time slots talk2.withTimeslot(slot2); scoreVerifier.assertHardWeight(ROOM_CONFLICT, -10, solution); }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In order to test room conflict, you need to initialize two talks, three timeslots and one room. However, the previous snippet of code is too long for such a simple unit test, most of the boilerplate code is for initializing required fields for the conference solution that you do not need for the unit test, and you must do that for every single unit test. For more complex constraints, it gets too cumbersome to write traditional unit tests and reason about them.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_unit_tests_in_code_xlsx_code_files"&gt;Unit tests in &lt;code&gt;xlsx&lt;/code&gt; files&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In order to avoid initializing unwanted fields, you can take advantage of &lt;a href="https://github.com/kiegroup/optaplanner/blob/master/optaplanner-examples/src/main/java/org/optaplanner/examples/conferencescheduling/persistence/ConferenceSchedulingXlsxFileIO.java"&gt;ConferenceSchedulingXlsxFileIO&lt;/a&gt; to initialize them for you, and only write what you use in that test or in other tests in the same spreadsheet.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To test room conflict using an &lt;code&gt;xlsx&lt;/code&gt; file, create three timeslots, two talks and one room:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;a class="image" href="xlsxUnitTestingTimeslots.png"&gt;&lt;img src="xlsxUnitTestingTimeslots.png" alt="xlsxUnitTestingTimeslots" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;a class="image" href="xlsxUnitTestingTalks.png"&gt;&lt;img src="xlsxUnitTestingTalks.png" alt="xlsxUnitTestingTalks" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;a class="image" href="xlsxUnitTestingRooms.png"&gt;&lt;img src="xlsxUnitTestingRooms.png" alt="xlsxUnitTestingRooms" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;After you initialize the required fields, create a separate sheet for every score verification of each constraint. For example, these 2 sheets check the room conflict constraint:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;a class="image" href="xlsxUnitTestingRoomConflict1.png"&gt;&lt;img src="xlsxUnitTestingRoomConflict1.png" alt="xlsxUnitTestingRoomConflict1" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;a class="image" href="xlsxUnitTestingRoomConflict2.png"&gt;&lt;img src="xlsxUnitTestingRoomConflict2.png" alt="xlsxUnitTestingRoomConflict2" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In every test sheet (blue color), specify the constraint package, constraint name, description of current test scenario and expected score. Then assign the talks to rooms and timeslots to visualize them easily. Note that you do not need to list all the timeslots and rooms declared in Timeslots and Rooms sheets.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_conclusion"&gt;Conclusion&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Instead of writing unit tests in code, business experts can specify how they want the constraints to be matched in an Excel/LibreOffice file. Developers then implement the constraints to pass these tests. This provides a more efficient way of communication between developers and domain experts.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To test score rules in an &lt;code&gt;xlsx&lt;/code&gt; file:&lt;/p&gt; &lt;/div&gt; &lt;div class="olist arabic"&gt; &lt;ol class="arabic"&gt; &lt;li&gt; &lt;p&gt;List all the required fields for your tests in the setup sheets.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For every score verification, create a separate blue test sheet with the constraint package, constraint name and expcted score.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;List only the fields that you want to use for the corresponding rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;em&gt;testFileName&lt;/em&gt; in &lt;a href="https://github.com/kiegroup/optaplanner/blob/master/optaplanner-examples/src/main/test/java/org/optaplanner/examples/conferencescheduling/solver/ConferenceSchedulingScoreRulesXlsxTest.java"&gt;ConferenceSchedulingScoreRulesXlsxTest&lt;/a&gt; and run the test file.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_related_material"&gt;Related material&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="https://www.optaplanner.org/blog/2018/02/19/SchedulingVoxxedDaysZurich2018.html"&gt;Scheduling Voxxed Days Zurich 2018 with OptaPlanner&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt; &lt;iframe width="853" height="480" src="https://www.youtube.com/embed/R0JizNdxEjU" frameborder="0" allowfullscreen="" /&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vGKzDrM4BZk" height="1" width="1" alt=""/&gt;</content><summary>The business experts explain the business constraints to us, the developers. But how can we be sure that we understood them correctly? Or worse, how can we test that they agree among themselves once the constraints are formalized? Well, there’s one great way to do that: JUnit tests populated by *.xlsx data. We allow them to recreate a small subset of the solution in Excel/LibreOffice and let them ...</summary><dc:creator>MusaTalluzi</dc:creator><dc:date>2018-08-21T00:00:00Z</dc:date><feedburner:origLink>https://www.optaplanner.org/blog/2018/08/21/UnitTestingConstraintsWithBusinessInputFromExcelOrLibreOffice.html</feedburner:origLink></entry><entry><title>How to integrate A-MQ 6.3 on Red Hat JBoss EAP 7</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xjsCXUmWwv0/" /><category term="Integration" /><category term="JBoss A-MQ" /><category term="Red Hat JBoss Enterprise Application Platform" /><category term="AM-Q" /><category term="messaging" /><category term="Red Hat AMQ" /><category term="Red Hat JBoss AMQ" /><category term="Red Hat JBoss EAP" /><author><name>Abraham Francisco Arellano Tavara</name></author><id>https://developers.redhat.com/blog/?p=507347</id><updated>2018-08-20T11:00:48Z</updated><published>2018-08-20T11:00:48Z</published><content type="html">&lt;p&gt;This article describes in detail how to integrate &lt;a href="https://developers.redhat.com/products/amq/overview/"&gt;Red Hat A-MQ 6.3&lt;/a&gt; on &lt;a href="https://developers.redhat.com/products/eap/download/"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (EAP) 7 and covers in detail the admin-object configuration, especially the pool-name configuration. The attribute pool-name for the admin-object explanation can lead to confusion. In this post, I will try to clarify many of the steps, give an overview of the components, and how they fit together.&lt;/p&gt; &lt;p&gt;The JBoss EAP requires the configuration of a resource adapter as a central component for integration with the A-MQ 6.3. In addition, the MDBs configuration on the EAP is required to enable the JMS consumers. On the A-MQ 6.3, the configuration of the Transport Connectors is required to open the communication channel with the EAP.&lt;/p&gt; &lt;p&gt;All the steps required to configure EAP 7 to use A-MQ 6.3 as an external JMS broker are described here:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#genericra"&gt;Generic Resource Adapter configuration on JBoss EAP 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#mdb"&gt;MDB configuration for EJB subsystem&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#transport"&gt;A-MQ ports/transport-connectors/security configuration&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span id="more-507347"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Overview of JBoss EAP and A-MQ components&lt;/h2&gt; &lt;p&gt;First, is important to understand the components involved in the configuration and the relationship between them.&lt;/p&gt; &lt;h3&gt;Resource Adapter&lt;/h3&gt; &lt;p&gt;The resource adapter is the central component for the JBoss EAP configuration. It provides the link from the EAP to the A-MQ broker.&lt;/p&gt; &lt;p&gt;In a nutshell, a resource adapter is a deployable Java EE component (usually a .rar file). The resource adapter provides communication between a Java EE application (usually deployed on the JBoss EAP instance) and an Enterprise Information System (EIS) using the Java Connector Architecture (JCA) specification.&lt;/p&gt; &lt;p&gt;A resource adapter is often provided by EIS vendors to allow easy integration of their products with Java EE applications.&lt;/p&gt; &lt;p&gt;On JBoss EAP 7, the resource adapters are defined in the &lt;code&gt;resource-adapter&lt;/code&gt; subsystem.&lt;/p&gt; &lt;h3&gt;MDB&lt;/h3&gt; &lt;p&gt;The MDB configuration in JBoss EAP provides the capability to the Java applications to create a consumer of the A-MQ linked to JBoss EAP. In addition, the MDB pool provides a constraint on the number of instances and sessions available.&lt;/p&gt; &lt;h3&gt;Transport Connectors&lt;/h3&gt; &lt;p&gt;The Transport Connectors are endpoints defined on the A-MQ broker that allows client-broker communication. The Transport Connectors can be configured using different Transport Protocols (TCP, SSL, HTTP, HTTPS, etc.) and can support different Wire Protocols (Openwire, STOMP, AMQP, etc.)&lt;/p&gt; &lt;h3&gt;Components integration overview&lt;/h3&gt; &lt;p&gt;The image below depicts in a simple way how the components described above are related.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-513677 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/EAP-7.1-integration-A-MQ-6.3.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/EAP-7.1-integration-A-MQ-6.3.png" alt="" width="761" height="581" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/EAP-7.1-integration-A-MQ-6.3.png 761w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/EAP-7.1-integration-A-MQ-6.3-300x229.png 300w" sizes="(max-width: 761px) 100vw, 761px" /&gt;&lt;/p&gt; &lt;h2&gt;&lt;a name="genericra"&gt;&lt;/a&gt;Generic Resource Adapter configuration on EAP 7&lt;/h2&gt; &lt;p&gt;In JBoss EAP 7.1, the recommended messaging broker is AMQ 7, which has an integrated resource adapter in the messaging subsystem. However, is possible to use a different messaging broker or a legacy A-MQ messaging broker.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Extract the resource adapter from the A-MQ 6.3 distribution.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The initial step is to extract the .rar file from the A-MQ 6.3 distribution to a more accessible location. The resource adapter zip container is located in $AMQ_HOME/extras/apache-activemq-5.11.0.redhat-[&lt;em&gt;LATEST_VERSION&lt;/em&gt;]-bin.zip.&lt;/p&gt; &lt;pre&gt;unzip $AMQ_HOME/extras/apache-activemq-5.11.0.redhat-[&lt;em&gt;LATEST_VERSION&lt;/em&gt;]-bin.zip \ -d /tmp &lt;/pre&gt; &lt;p&gt;Extract the file to a known location: [AMQ_RAR_DIRECTORY].&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Deploy the resource adapter in a standalone/domain JBoss server using the CLI.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;Server$ jboss-cli.sh&lt;/pre&gt; &lt;p&gt;In a standalone server:&lt;/p&gt; &lt;pre&gt;Server$ deploy /tmp/apache-activemq-5.11.0.redhat-[&lt;em&gt;LATEST_VERSION&lt;/em&gt;]/lib/optional\ /activemq-rar-5.11.0.redhat-[&lt;em&gt;LATEST_VERSION&lt;/em&gt;].rar &lt;/pre&gt; &lt;p&gt;In a domain managed server:&lt;/p&gt; &lt;pre&gt;Server$ deploy /tmp/apache-activemq-5.11.0.redhat-[&lt;em&gt;LATEST_VERSION&lt;/em&gt;]/lib/optional\ /activemq-rar-5.11.0.redhat-[&lt;em&gt;LATEST_VERSION&lt;/em&gt;].rar \ –server-groups=[SERVER_GROUP_1],[SERVER_GROUP_2],... &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Deploy the resource adapter using the management console.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Is also possible to deploy the resource adapter using the management console&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Manual resource adapter deployment in a standalone server using the deployment scanner:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In order to deploy a resource adapter manually to a standalone server, copy the resource adapter archive to the server deployments directory $EAP_HOME/standalone/deployments/. As a result, the scanner will inspect the deployments directory and deploy the resource adapter.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;New profiles for domain managed server:&lt;/strong&gt;&lt;br /&gt; Probably, it is a requirement to have different server groups working with different broker technology or configuration. In order to achieve a better separation of concerns regarding access to JMS services, a new profile that contains the broker configuration can be created.&lt;/p&gt; &lt;h3&gt;Resource adapter manual configuration&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Add a resource adapter element to the resource-adapters subsystem:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&amp;#60;subsystem xmlns="urn:jboss:domain:resource-adapters:4.0"&amp;#62; &amp;#60;resource-adapters&amp;#62; &amp;#60;resource-adapter id="activemq-rar.rar" statistics-enabled="true"&amp;#62; &amp;#60;/resource-adapter&amp;#62; &amp;#60;/resource-adapters&amp;#62; &amp;#60;/subsystem&amp;#62; &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Definition of the archive of the resource adapter:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&amp;#60;subsystem xmlns="urn:jboss:domain:resource-adapters:4.0"&amp;#62; &amp;#60;resource-adapters&amp;#62; &amp;#60;resource-adapter id="activemq-rar.rar" statistics-enabled="true"&amp;#62; &amp;#60;archive&amp;#62; activemq-rar.rar &amp;#60;/archive&amp;#62; &amp;#60;/resource-adapter&amp;#62; &amp;#60;/resource-adapters&amp;#62; &amp;#60;/subsystem&amp;#62; &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Set up different configuration properties:&lt;/strong&gt;&lt;br /&gt; First, set up the server URL, the access credentials, and the type of transaction support.&lt;/p&gt; &lt;pre&gt;&amp;#60;subsystem xmlns="urn:jboss:domain:resource-adapters:4.0"&amp;#62; &amp;#60;resource-adapters&amp;#62; &amp;#60;resource-adapter id="activemq-rar.rar" statistics-enabled="true"&amp;#62; &amp;#60;archive&amp;#62; activemq-rar.rar &amp;#60;/archive&amp;#62; &amp;#60;transaction-support&amp;#62;XATransaction&amp;#60;/transaction-support&amp;#62; &amp;#60;config-property name="ServerUrl"&amp;#62; tcp://[BROKER_HOST]:[BROKER_PORT] &amp;#60;/config-property&amp;#62; &amp;#60;config-property name="UserName"&amp;#62; myusername &amp;#60;/config-property&amp;#62; &amp;#60;config-property name="Password"&amp;#62; mypassword &amp;#60;/config-property&amp;#62; &amp;#60;/resource-adapter&amp;#62; &amp;#60;/resource-adapters&amp;#62; &amp;#60;/subsystem&amp;#62; &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Establish connection definitions:&lt;/strong&gt;&lt;br /&gt; A possible connection-definition class-name can be: org.apache.activemq.ra.ActiveMQManagedConnectionFactory. The election depends on the type of factory you have to use.&lt;/p&gt; &lt;pre&gt;&amp;#60;subsystem xmlns="urn:jboss:domain:resource-adapters:4.0"&amp;#62; &amp;#60;resource-adapters&amp;#62; &amp;#60;resource-adapter id="activemq-rar.rar" statistics-enabled="true"&amp;#62; &amp;#60;archive&amp;#62; activemq-rar.rar &amp;#60;/archive&amp;#62; &amp;#60;transaction-support&amp;#62;XATransaction&amp;#60;/transaction-support&amp;#62; &amp;#60;config-property name="ServerUrl"&amp;#62; tcp://[BROKER_HOST]:[BROKER_PORT] &amp;#60;/config-property&amp;#62; &amp;#60;config-property name="UserName"&amp;#62; myusername &amp;#60;/config-property&amp;#62; &amp;#60;config-property name="Password"&amp;#62; mypassword &amp;#60;/config-property&amp;#62; &amp;#60;connection-definitions&amp;#62; &amp;#60;connection-definition class-name="com.ra.EISManagedConnectionFactory" jndi-name="java:/jms/connection/amq/ManagedConnectionFactory" enabled="true" pool-name="A-MQ"&amp;#62; &amp;#60;xa-pool&amp;#62; &amp;#60;min-pool-size&amp;#62;1&amp;#60;/min-pool-size&amp;#62; &amp;#60;max-pool-size&amp;#62;50&amp;#60;/max-pool-size&amp;#62; &amp;#60;prefill&amp;#62;false&amp;#60;/prefill&amp;#62; &amp;#60;is-same-rm-override&amp;#62;false&amp;#60;/is-same-rm-override&amp;#62; &amp;#60;/xa-pool&amp;#62; &amp;#60;validation&amp;#62; &amp;#60;use-fast-fail&amp;#62;false&amp;#60;/use-fast-fail&amp;#62; &amp;#60;/validation&amp;#62; &amp;#60;/connection-definition&amp;#62; &amp;#60;/connection-definitions&amp;#62; &amp;#60;/resource-adapter&amp;#62; &amp;#60;/resource-adapters&amp;#62; &amp;#60;/subsystem&amp;#62; &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Configure XA Recovery plugin:&lt;/strong&gt;&lt;br /&gt; The &amp;#8220;XA recovery&amp;#8221; is the process that updates or rollback a transaction if one of the participant crash or is unavailable. XA recovery happens without user intervention.&lt;/p&gt; &lt;p&gt;Each XA resource needs to have a recovery module associated with its configuration.&lt;/p&gt; &lt;pre&gt;&amp;#60;subsystem xmlns="urn:jboss:domain:resource-adapters:4.0"&amp;#62; &amp;#60;resource-adapters&amp;#62; &amp;#60;resource-adapter id="activemq-rar.rar" statistics-enabled="true"&amp;#62; &amp;#60;archive&amp;#62; activemq-rar.rar &amp;#60;/archive&amp;#62; &amp;#60;transaction-support&amp;#62;XATransaction&amp;#60;/transaction-support&amp;#62; &amp;#60;config-property name="ServerUrl"&amp;#62; tcp://[BROKER_HOST]:[BROKER_PORT] &amp;#60;/config-property&amp;#62; &amp;#60;config-property name="UserName"&amp;#62; myusername &amp;#60;/config-property&amp;#62; &amp;#60;config-property name="Password"&amp;#62; mypassword &amp;#60;/config-property&amp;#62; &amp;#60;connection-definitions&amp;#62; &amp;#60;connection-definition class-name="com.ra.EISManagedConnectionFactory" jndi-name="java:/jms/connection/amq/ManagedConnectionFactory" enabled="true" pool-name="A-MQ"&amp;#62; &amp;#60;xa-pool&amp;#62; &amp;#60;min-pool-size&amp;#62;1&amp;#60;/min-pool-size&amp;#62; &amp;#60;max-pool-size&amp;#62;50&amp;#60;/max-pool-size&amp;#62; &amp;#60;prefill&amp;#62;false&amp;#60;/prefill&amp;#62; &amp;#60;is-same-rm-override&amp;#62;false&amp;#60;/is-same-rm-override&amp;#62; &amp;#60;/xa-pool&amp;#62; &amp;#60;validation&amp;#62; &amp;#60;use-fast-fail&amp;#62;false&amp;#60;/use-fast-fail&amp;#62; &amp;#60;/validation&amp;#62; &amp;#60;recovery&amp;#62; &amp;#60;recover-credential&amp;#62; &amp;#60;user-name&amp;#62;recoveryuser&amp;#60;/user-name&amp;#62; &amp;#60;password&amp;#62;recoverypassword&amp;#60;/password&amp;#62; &amp;#60;/recover-credential&amp;#62; &amp;#60;recover-plugin class-name="org.jboss.jca.core.recovery.ConfigurableRecoveryPlugin"&amp;#62; &amp;#60;config-property name="enableIsValid"&amp;#62; false &amp;#60;/config-property&amp;#62; &amp;#60;config-property name="isValidOverride"&amp;#62; true &amp;#60;/config-property&amp;#62; &amp;#60;/recover-plugin&amp;#62; &amp;#60;/recovery&amp;#62; &amp;#60;/connection-definition&amp;#62; &amp;#60;/connection-definitions&amp;#62; &amp;#60;/resource-adapter&amp;#62; &amp;#60;/resource-adapters&amp;#62; &amp;#60;/subsystem&amp;#62; &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Admin objects setup and configuration:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The admin objects are created in order to provide JNDI lookup of JMS queues for JBoss EAP applications.&lt;/p&gt; &lt;p&gt;The attribute that often causes problems to define an unanswered question is the pool-name attribute of the admin-object. The attribute &amp;#8220;pool-name is not implemented in JBoss EAP, that means, this attribute should not be used.&lt;/p&gt; &lt;pre&gt;&amp;#60;subsystem xmlns="urn:jboss:domain:resource-adapters:4.0"&amp;#62; &amp;#60;resource-adapters&amp;#62; &amp;#60;resource-adapter id="activemq-rar.rar" statistics-enabled="true"&amp;#62; &amp;#60;archive&amp;#62; activemq-rar.rar &amp;#60;/archive&amp;#62; &amp;#60;transaction-support&amp;#62;XATransaction&amp;#60;/transaction-support&amp;#62; &amp;#60;config-property name="ServerUrl"&amp;#62; tcp://[BROKER_HOST]:[BROKER_PORT] &amp;#60;/config-property&amp;#62; &amp;#60;config-property name="UserName"&amp;#62; myusername &amp;#60;/config-property&amp;#62; &amp;#60;config-property name="Password"&amp;#62; mypassword &amp;#60;/config-property&amp;#62; &amp;#60;connection-definitions&amp;#62; &amp;#60;connection-definition class-name="com.ra.EISManagedConnectionFactory" jndi-name="java:/jms/connection/amq/ManagedConnectionFactory" enabled="true" pool-name="A-MQ"&amp;#62; &amp;#60;xa-pool&amp;#62; &amp;#60;min-pool-size&amp;#62;1&amp;#60;/min-pool-size&amp;#62; &amp;#60;max-pool-size&amp;#62;50&amp;#60;/max-pool-size&amp;#62; &amp;#60;prefill&amp;#62;false&amp;#60;/prefill&amp;#62; &amp;#60;is-same-rm-override&amp;#62;false&amp;#60;/is-same-rm-override&amp;#62; &amp;#60;/xa-pool&amp;#62; &amp;#60;validation&amp;#62; &amp;#60;use-fast-fail&amp;#62;false&amp;#60;/use-fast-fail&amp;#62; &amp;#60;/validation&amp;#62; &amp;#60;recovery&amp;#62; &amp;#60;recover-credential&amp;#62; &amp;#60;user-name&amp;#62;recoveryuser&amp;#60;/user-name&amp;#62; &amp;#60;password&amp;#62;recoverypassword&amp;#60;/password&amp;#62; &amp;#60;/recover-credential&amp;#62; &amp;#60;recover-plugin class-name="org.jboss.jca.core.recovery.ConfigurableRecoveryPlugin"&amp;#62; &amp;#60;config-property name="enableIsValid"&amp;#62; false &amp;#60;/config-property&amp;#62; &amp;#60;config-property name="isValidOverride"&amp;#62; true &amp;#60;/config-property&amp;#62; &amp;#60;/recover-plugin&amp;#62; &amp;#60;/recovery&amp;#62; &amp;#60;/connection-definition&amp;#62; &amp;#60;/connection-definitions&amp;#62; &amp;#60;admin-objects&amp;#62; &amp;#60;admin-object class-name="org.apache.activemq.command.ActiveMQQueue" jndi-name="java:/jms/myapp/myqueuename" pool-name="MY_POOL_NAME"&amp;#62; &amp;#60;config-property name="PhysicalName"&amp;#62; myapp_mycontext_myqueuename &amp;#60;/config-property&amp;#62; &amp;#60;/admin-object&amp;#62; &amp;#60;/admin-objects&amp;#62; &amp;#60;/resource-adapter&amp;#62; &amp;#60;/resource-adapters&amp;#62; &amp;#60;/subsystem&amp;#62; &lt;/pre&gt; &lt;h3&gt;Resource adapter CLI configuration&lt;/h3&gt; &lt;p&gt;You can configure resource adapters using the management interfaces. I show below how to configure a resource adapter using the management CLI. If you are using this document as a reference for other resource adapters, it is important to check the vendor’s documentation for supported properties and other important information.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Add a resource adapter element to the resource-adapters subsystem and define the archive of the resource adapter:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;/subsystem=resource-adapters/resource-adapter=eis.rar:add(archive=eis.rar, \ transaction-support=XATransaction) &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Define different configuration properties:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add the server configuration property.&lt;/p&gt; &lt;pre&gt;/subsystem=resource-adapters/resource-adapter=activemq-rar.rar/\ config-properties=server:add(value=[$AMQ_BROKER_URL]) &lt;/pre&gt; &lt;p&gt;Add the port configuration property.&lt;/p&gt; &lt;pre&gt;/subsystem=resource-adapters/resource-adapter=activemq-rar.rar/\ config-properties=port:add(value=[$AMQ_BROKER_PORT]) &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Define connection definitions:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add a connection definition for a managed connection factory.&lt;/p&gt; &lt;pre&gt;/subsystem=resource-adapters/resource-adapter=eis.rar/\ connection-definitions=cfName:add(class-name=com.ra.EISManagedConnectionFactory, \ jndi-name=java:/jms/connection/amq/ManagedConnectionFactory) &lt;/pre&gt; &lt;p&gt;Configure a managed connection factory configuration property.&lt;/p&gt; &lt;pre&gt;/subsystem=resource-adapters/resource-adapter=eis.rar/connection-definitions=cfName/\ config-properties=name:add(value=Acme Inc) &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Configure XA Recovery plugin:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In order to correctly define the &amp;#8220;recovery-plugin-properties&amp;#8221; using the CLI commands, first, add &amp;#8220;recovery-plugin-class-name&amp;#8221;.&lt;/p&gt; &lt;pre&gt;/subsystem=datasources/xa-data-source=test-xa-datasource/\ :write-attribute(name=recovery-plugin-class-name,\ value=org.jboss.jca.core.recovery.ConfigurableRecoveryPlugin) &lt;/pre&gt; &lt;p&gt;Then add the &amp;#8220;recovery-plugin-properties&amp;#8221;.&lt;/p&gt; &lt;pre&gt;/subsystem=datasources/xa-data-source=test-xa-datasource/\ :write-attribute(name=recovery-plugin-properties,\ value={"EnableIsValid" =&amp;#62; "false",\ "IsValidOverride" =&amp;#62; "true",\ "EnableClose" =&amp;#62; "false"}) &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Admin objects setup and configuration:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add an admin object.&lt;/p&gt; &lt;pre&gt;/subsystem=resource-adapters/resource-adapter=activemq-rar.rar/\ admin-objects=aoName:add(\ class-name=org.apache.activemq.command.ActiveMQQueue, \ jndi-name=java:/jms/myapp/myqueuename) &lt;/pre&gt; &lt;p&gt;Configure an admin object configuration property.&lt;/p&gt; &lt;pre&gt;/subsystem=resource-adapters/resource-adapter=activemq-rar.rar/\ admin-objects=aoName/config-properties=threshold:add(value=10) &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Activate the Resource Adapter:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Activate the resource adapter.&lt;/p&gt; &lt;pre&gt;/subsystem=resource-adapters/resource-adapter=activemq-rar.rar:activate &lt;/pre&gt; &lt;h2&gt;&lt;a name="mdb"&gt;&lt;/a&gt;MDB configuration for EJB subsystem&lt;/h2&gt; &lt;p&gt;First is important to understand what an MDB is. MDBs are a special kind of stateless session beans and they are the JMS consumer of a specific queue.&lt;/p&gt; &lt;p&gt;They implement a method called onMessage(Message message) executed when a JMS destination on which the MDB is listening receives a message.&lt;/p&gt; &lt;p&gt;The JMS consumer is responsible to trigger a MDBs asynchronously.&lt;/p&gt; &lt;p&gt;By default, the MDBs have 16 sessions to process messages concurrently.&lt;/p&gt; &lt;p&gt;Add the requisite message-driven bean configuration to the urn:jboss:domain:ejb3 subsystem in the JBoss EAP configuration.&lt;/p&gt; &lt;pre&gt;&amp;#60;mdb&amp;#62; &amp;#60;resource-adapter-ref resource-adapter-name="activemq-rar.rar"/&amp;#62; &amp;#60;bean-instance-pool-ref pool-name="mdb-strict-max-pool"/&amp;#62; &amp;#60;/mdb&amp;#62; &lt;/pre&gt; &lt;p&gt;In addition, define the MDB pool:&lt;/p&gt; &lt;pre&gt;&amp;#60;pools&amp;#62; &amp;#60;bean-instance-pools&amp;#62; &amp;#60;strict-max-pool name="slsb-strict-max-pool" max-pool-size="20" instance-acquisition-timeout="5" instance-acquisition-timeout-unit="MINUTES"/&amp;#62; &amp;#60;strict-max-pool name="mdb-strict-max-pool" max-pool-size="20" instance-acquisition-timeout="5" instance-acquisition-timeout-unit="MINUTES"/&amp;#62; &amp;#60;/bean-instance-pools&amp;#62; &amp;#60;/pools&amp;#62; &lt;/pre&gt; &lt;p&gt;The final standalone.xml configuration should look like:&lt;/p&gt; &lt;pre&gt;&amp;#60;server ...&amp;#62; ... &amp;#60;profile&amp;#62; ... &amp;#60;subsystem xmlns="urn:jboss:domain:ejb3:..."&amp;#62; ... &amp;#60;mdb&amp;#62; &amp;#60;resource-adapter-ref resource-adapter-name="activemq-rar.rar"/&amp;#62; &amp;#60;bean-instance-pool-ref pool-name="mdb-strict-max-pool"/&amp;#62; &amp;#60;/mdb&amp;#62; &amp;#60;pools&amp;#62; &amp;#60;bean-instance-pools&amp;#62; &amp;#60;strict-max-pool name="slsb-strict-max-pool" max-pool-size="20" instance-acquisition-timeout="5" instance-acquisition-timeout-unit="MINUTES"/&amp;#62; &amp;#60;strict-max-pool name="mdb-strict-max-pool" max-pool-size="20" instance-acquisition-timeout="5" instance-acquisition-timeout-unit="MINUTES"/&amp;#62; &amp;#60;/bean-instance-pools&amp;#62; &amp;#60;/pools&amp;#62; ... &amp;#60;/subsystem&amp;#62; ... &amp;#60;/profile&amp;#62; ... &amp;#60;/server&amp;#62; &lt;/pre&gt; &lt;h2&gt;&lt;a name="transport"&gt;&lt;/a&gt;A-MQ ports/transport-connectors&lt;/h2&gt; &lt;p&gt;First, the A-MQ configuration requires the transport connectors that define the endpoint used by JBoss EAP to integrate the resource adapter.&lt;/p&gt; &lt;p&gt;Implement the following configuration in the activemq.xml:&lt;/p&gt; &lt;pre&gt;&amp;#60;transportConnectors&amp;#62; &amp;#60;transportConnector name="openwire-client" uri="nio://0.0.0.0:[BROKER_PORT]?[TRANSPORT_OPTIONS]"/&amp;#62; &amp;#60;/transportConnectors&amp;#62; &lt;/pre&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;This article provides a detailed description of Red Hat JBoss EAP 7 integration with A-MQ 6.3 and the admin-object configuration, which is a complex process if the required steps are not clear for the integrator. This article covers the admin-object setup and the pool-name attribute in great detail and provides a good hint regarding the correct configuration.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F20%2Fhow-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7%2F&amp;#38;linkname=How%20to%20integrate%20A-MQ%206.3%20on%20Red%20Hat%20JBoss%20EAP%207" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F20%2Fhow-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7%2F&amp;#38;linkname=How%20to%20integrate%20A-MQ%206.3%20on%20Red%20Hat%20JBoss%20EAP%207" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F20%2Fhow-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7%2F&amp;#38;linkname=How%20to%20integrate%20A-MQ%206.3%20on%20Red%20Hat%20JBoss%20EAP%207" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F20%2Fhow-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7%2F&amp;#38;linkname=How%20to%20integrate%20A-MQ%206.3%20on%20Red%20Hat%20JBoss%20EAP%207" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F20%2Fhow-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7%2F&amp;#38;linkname=How%20to%20integrate%20A-MQ%206.3%20on%20Red%20Hat%20JBoss%20EAP%207" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F20%2Fhow-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7%2F&amp;#38;linkname=How%20to%20integrate%20A-MQ%206.3%20on%20Red%20Hat%20JBoss%20EAP%207" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F20%2Fhow-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7%2F&amp;#38;linkname=How%20to%20integrate%20A-MQ%206.3%20on%20Red%20Hat%20JBoss%20EAP%207" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F20%2Fhow-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7%2F&amp;#38;linkname=How%20to%20integrate%20A-MQ%206.3%20on%20Red%20Hat%20JBoss%20EAP%207" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F20%2Fhow-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7%2F&amp;#38;title=How%20to%20integrate%20A-MQ%206.3%20on%20Red%20Hat%20JBoss%20EAP%207" data-a2a-url="https://developers.redhat.com/blog/2018/08/20/how-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7/" data-a2a-title="How to integrate A-MQ 6.3 on Red Hat JBoss EAP 7"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/20/how-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7/"&gt;How to integrate A-MQ 6.3 on Red Hat JBoss EAP 7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xjsCXUmWwv0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article describes in detail how to integrate Red Hat A-MQ 6.3 on Red Hat JBoss Enterprise Application Platform (EAP) 7 and covers in detail the admin-object configuration, especially the pool-name configuration. The attribute pool-name for the admin-object explanation can lead to confusion. In this post, I will try to clarify many of the steps, [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/20/how-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7/"&gt;How to integrate A-MQ 6.3 on Red Hat JBoss EAP 7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/08/20/how-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">507347</post-id><dc:creator>Abraham Francisco Arellano Tavara</dc:creator><dc:date>2018-08-20T11:00:48Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/20/how-to-integrate-a-mq-6-3-on-red-hat-jboss-eap-7/</feedburner:origLink></entry><entry><title>Keycloak 4.3.0.Final Released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EPt_dIb-EKM/keycloak-430final-released.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><author><name>Stian Thorgersen</name></author><id>searchisko:content:id:jbossorg_blog-keycloak_4_3_0_final_released</id><updated>2018-08-16T10:14:09Z</updated><published>2018-08-16T10:14:00Z</published><content type="html">&lt;p&gt;To download the release go to the &lt;a href="http://www.keycloak.org/downloads"&gt;Keycloak homepage&lt;/a&gt;. &lt;p&gt;For details on what is included in the release check out the &lt;a href="https://www.keycloak.org/docs/latest/release_notes/index.html"&gt;Release notes&lt;/a&gt; &lt;p&gt;The full list of resolved issues is available in &lt;a href="https://issues.jboss.org/issues/?jql=project%20%3D%20keycloak%20and%20fixVersion%20%3D%204.3.0.Final"&gt;JIRA&lt;/a&gt;. &lt;p&gt;Before you upgrade remember to backup your database and check the &lt;a href="http://www.keycloak.org/docs/latest/upgrading/index.html"&gt;upgrade guide&lt;/a&gt; for anything that may have changed.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EPt_dIb-EKM" height="1" width="1" alt=""/&gt;</content><summary>To download the release go to the Keycloak homepage. For details on what is included in the release check out the Release notes The full list of resolved issues is available in JIRA. Before you upgrade remember to backup your database and check the upgrade guide for anything that may have changed.</summary><dc:creator>Stian Thorgersen</dc:creator><dc:date>2018-08-16T10:14:00Z</dc:date><feedburner:origLink>http://blog.keycloak.org/2018/08/keycloak-430final-released.html</feedburner:origLink></entry></feed>
